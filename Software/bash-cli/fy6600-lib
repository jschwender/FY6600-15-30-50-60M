#!/bin/bash
# library for communication with FY 6600 signal generator via USB (serial adapter built in)
#    fy6600-lib is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    fy6600-lib is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with fy6600-lib.  If not, see <http://www.gnu.org/licenses/>.
#
#    Author: Joachim Schwender <joachim@schwender-beyer.de>
#
##Bus 001 Device 007: ID 1a86:7523 QinHeng Electronics HL-340 USB-Serial adapter
# code requires bash shell, stty, bc
#
export LC_ALL=C
DEV=/dev/ttyUSB0
# for choosing main or sub channel
Main='M'
Sub='F'
# Wave form as an array for displaying the name read from the device
WF=(Sine Rectangular AdjPulse DC Triangle RampUp RampDown StairTriangle StairStep NegStairStep PosExponent NegExponent PosFallExponent NegFallExponent PosLogarithm NegativeLogarithm PositiveFallingLogarithm NegativeFallingLogarithm PositiveHalf NegativeHalf PositiveHalfRect NegativeHalfRect LorenzPulse Multitone RandomNoise Electrocardiogram TrapezoidalPulse SincPulse NarrowPulse GaussWhiteNoise AM FM Chirp Arbitrary1 Arbitrary2 Arbitrary3 Arbitrary4 Arbitrary5 Arbitrary6 Arbitrary7 Arbitrary8 Arbitrary9 Arbitrary10 Arbitrary11 Arbitrary12 Arbitrary13 Arbitrary14 Arbitrary15 Arbitrary16)
MT=(FSK ASK PSK BURS AM FM FW)
# Names for setting the wave form
wfSine=0
wfRectangular=1
wfAdjPulse=2
wfDC=3
wfTriangle=4
wfRampUp=5
wfRampDown=6
wfStairTriangle=7
wfStairStep=8
wfNegStairStep=9
wfPosExponent=10
wfNegExponent=11
wfPosFallExponent=12
wfNegFallExponent=13
wfPosLogarithm=14
wfNegLogarithm=15
wfPosFallLogarithm=16
wfNegFallLogarithm=17
wfPosHalf=18
wfNegHalf=19
wfPosHalfRect=20
wfNegHalfRect=21
wfLorenzPulse=22
wfMultitone=23
wfRandomNoise=24
wfElectrocardiogram=25
wfTrapezoidalPulse=26
wfSincPulse=27
wfNarrowPulse=28
wfGaussWhiteNoise=29
wfAM=30
wfFM=31
wfChirp=32
wfArbitrary1=33
wfArbitrary2=34
wfArbitrary3=35
wfArbitrary4=36
wfArbitrary5=37
wfArbitrary6=38
wfArbitrary7=39
wfArbitrary8=40
wfArbitrary9=41
wfArbitrary10=42
wfArbitrary11=43
wfArbitrary12=44
wfArbitrary13=45
wfArbitrary14=46
wfArbitrary15=47
wfArbitrary16=48
# Names and codes for modulation modes (or triggermodes in case of digital modulation)
ModulationMode=(CH2 ExternAC Manual ExtermDC)
mmCH2=0
mmExternAC=1
mmManual=2
mmExternDC=3
TriggerMode=(CH2 Extern)
mmCH2=0
mmExtern=1
# names and codes for sync objects
SyncObject=(WaveForm Freq Ampl Offset Duty)
syWaveForm=0
syFrequency=1
syAmplitude=2
syOffset=3
syDuty=4
#
SweepObject=(Freq Ampl Offset Duty)
swFrequency=0
swAmplitude=1
swOffset=2
swDuty=3
# modulation sources
moCH2=0
moExtAC=1
moMANU=2
moExtDC=3
#
SweepMode=(Linear Log)
smLinear=0
smLog=1
# Master/Slave mode
UplinkMode=(Master Slave)
ulMaster=0
ulSlave=1
#
SetupDEV() {
    echo "device setup:   configure $DEV with 115200 Bps"
    [ -w $DEV ] || { echo "device $DEV is not writable. ENDE"; exit 1; }
    stty -F "$DEV" speed 115200 cs8
}
IsEnabled() {
   case "$1" in
      0) echo "0" ;;  # disabled
    255) echo "1" ;;  # enabled
      *) echo "2" ;;  # error
   esac
}
#
SetWaveform()     { local XX=""; printf "W%sW%02i\\n"   "$1" "$2" > "$DEV"; read -r XX < "$DEV"; }  # M|F, int value [0…94]
SetF()            { local XX=""; printf "W%sF%014i\\n"  "$1" "$2" > "$DEV"; read -r XX < "$DEV"; }  # M|F, pos int value up to 14 digits in µHz
SetAmplitude()    { local XX=""; printf "W%sA%02.4f\\n" "$1" "$2" > "$DEV"; read -r XX < "$DEV"; }  # Main|Sub    float value [0…20.0000] in V
SetOffset()       { local XX=""; printf "W%sO%2.3f\\n"  "$1" "$2" > "$DEV"; read -r XX < "$DEV"; }  # M|F, float value [-10.000…10.000]
SetDuty()         { local XX=""; printf "W%sD%2.3f\\n"  "$1" "$2" > "$DEV"; read -r XX < "$DEV"; }  # M|F, float value [0…99.999]
SetPhase()        { local XX=""; printf "W%sP%2.3f\\n"  "$1" "$2" > "$DEV"; read -r XX < "$DEV"; }  # M|F, float value [0…359.999]
SetPulsePeriod()  { local XX=""; printf "W%sS%i\\n"     "$1" "$2" > "$DEV"; read -r XX < "$DEV"; }  # M|F, int value in ns, valid only for wave form = Adj-Pulse
SetOutput()       { local XX=""; printf "W%sN%1i\\n"    "$1" "$2" > "$DEV"; read -r XX < "$DEV"; }  # M|F, [0,1] switch output CH1|CH2 off|on
#
ReadWaveForm()    { local XX=""; printf "R%sW\\n"       "$1"      > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }  # int value Main[0…94] Sub[0…46]
ReadF()           { local XX=""; printf "R%sF\\n"       "$1"      > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }  # float value in Hz
ReadAmplitude()   { local XX=""; printf "R%sA\\n"       "$1"      > "$DEV"; read -r XX < "$DEV"; echo "scale=4;$XX / 10000"|bc; }  # unit is mV we want to return V
ReadOffset()      { local XX=""; printf "R%sO\\n"       "$1"      > "$DEV"; read -r XX < "$DEV"; if [ $XX -le 10000 ]; then echo "scale=4;$XX / 1000.0"|bc; else echo "scale=4;( $XX - 2^32 ) / 1000"|bc; fi;}  # unit is mV we want to return V
ReadDuty()        { local XX=""; printf "R%sD\\n"       "$1"      > "$DEV"; read -r XX < "$DEV"; echo "scale=3;$XX/1000"|bc; }    # int value in %*1000
ReadPhase()       { local XX=""; printf "R%sP\\n"       "$1"      > "$DEV"; read -r XX < "$DEV"; echo "scale=3;$XX/1000"|bc; }    # unit is degrees*10
ReadPulsePeriod() { local XX=""; printf "RSS\\n"                  > "$DEV"; read -r XX < "$DEV"; echo "scale=9;$XX / 10000000000"|bc; }   # unit is ns, we turn it into s, vaid only for wave form = Adj-Pulse
ReadOutput()      { local XX=""; printf "R%sN\\n"       "$1"      > "$DEV"; read -r XX < "$DEV"; IsEnabled "$XX"; } # M|F, return [0,255] ~to off,on
#
SetModSource()    { local XX=""; printf "WPM%i\\n" "$1" > "$DEV"; read -r XX < "$DEV"; }   # [0…3] ~to {CH2  Ext.(AC)  MANU  Ext.(DC)}
SetBurstNumber()  { local XX=""; printf "WPN%i\\n" "$1" > "$DEV"; read -r XX < "$DEV"; }   # [0…1048575]
SetFSKsecF()      { local XX=""; printf "WFK%f\\n" "$1" > "$DEV"; read -r XX < "$DEV"; }    # float value in Hz
#
ReadModSource()   { local XX=""; printf "RPM\\n" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }   # [0…3] ~to {CH2  Ext.(AC)  MANU  Ext.(DC)}
ReadBurstNumber() { local XX=""; printf "RPN\\n" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }   # int value representing the number of occured trigger on Main
ReadFSKsecF()     { local XX=""; printf "RFK\\n" > "$DEV"; read -r XX < "$DEV"; echo "scale=12;$XX / 10"|bc; }         # 10*Hz
# NEW!! not documented in original manual!!!
SetFMBias()       { local XX=""; printf "WFM%f\\n" "$1" > "$DEV"; read -r XX < "$DEV"; }   # float number [0…60M]
SetPMPhase()      { local XX=""; printf "WPP%f\\n" "$1" > "$DEV"; read -r XX < "$DEV"; }   # float number [0…359.99]
SetAMRate()       { local XX=""; printf "WPR%f\\n" "$1" > "$DEV"; read -r XX < "$DEV"; }   # float number [0…200.0] in %
SetModTyp()       { local XX=""; printf "WPF%i\\n" "$1" > "$DEV"; read -r XX < "$DEV"; }   # [0…6] ~to FSK ASK PSK BURS AM FM PM
# NEW!! not documented in original manual!!!
ReadFMBias()      { local XX=""; printf "RFM\\n" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }   # bias voltage
ReadPMPhase()     { local XX=""; printf "RPP\\n" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }   # Phase in °×100, 1600--> 16.00°
ReadAMRate()      { local XX=""; printf "RPR\\n" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }   # rate of AM modulation in %×10
ReadModTyp()      { local XX=""; printf "RPF\\n" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }   # [0…6]   FSK ASK PSK BURS AM FM FW  (no range check in device!!!)
# DEFECT!! do not work like documented in the original manual!!!
SetASKMode()      { local XX=""; printf "WTA%i\\n" "$1" > "$DEV"; read -r XX < "$DEV"; }   # 0 normal out no modulation, 1 modulation from ext input, 2 manual modulation.
SetFSKMode()      { local XX=""; printf "WTF%i\\n" "$1" > "$DEV"; read -r XX < "$DEV"; }   # 0 normal out no modulation, 1 modulation from ext input, 2 manual modulation.
SetPSKMode()      { local XX=""; printf "WTP%i\\n" "$1" > "$DEV"; read -r XX < "$DEV"; }   # 0 normal out no modulation, 1 modulation from ext input, 2 manual modulation.
# DEFECT!! do not work like documented in the original manual!!!
ReadASKMode()     { local XX=""; printf "RTA\\n" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }   # 0 normal out no modulation, 1 modulation from ext input, 2 manual modulation.
ReadFSKMode()     { local XX=""; printf "RTF\\n" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }   # 0 normal out no modulation, 1 modulation from ext input, 2 manual modulation.
ReadPSKMode()     { local XX=""; printf "RTP\\n" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }   # 0 normal out no modulation, 1 modulation from ext input, 2 manual modulation.
# undocumented commands, they are accepted but without effect.
SetX1()           { local XX=""; printf "WMT%s\\n" "$1" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }   #
SetX2()           { local XX=""; printf "RFT%s\\n" "$1" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }   #
SetX4()           { local XX=""; printf "RUL%s\\n" "$1" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }   #
SetX5()           { local XX=""; printf "RXY%s\\n" "$1" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }   #
# undocumented commands, return apperantly fixed values
ReadX1()          { local XX=""; printf "RMT\\n"        > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }   #
ReadX2()          { local XX=""; printf "RFT\\n"        > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }   #
ReadX4()          { local XX=""; printf "RUL\\n"        > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }   #
ReadX5()          { local XX=""; printf "RXY\\n"        > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }   #
#
#
ReadUID()         { local XX=""; printf "UID\\n"                  > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }
ReadModelNumber() { local XX=""; printf "UMO\\n"                  > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }
#  extermal measurement
SetCouplingDC()   { local XX=""; printf "WCC0\\n" > "$DEV" ; read -r XX < "$DEV"; }
SetCouplingAC()   { local XX=""; printf "WCC1\\n" > "$DEV" ; read -r XX < "$DEV"; }
SetGateTime()     { local XX=""; printf "WCG%s\\n" "$1" > "$DEV"; }                              # 0=1s, 1=10s, 2=100s gate time for measurement
#
ReadExternalF()    { local XX=""; printf "RCF\\n" > "$DEV"; read -r XX < "$DEV"; echo "$XX/$(ReadGateTime)"; }        # unit is Hz/Gatetime
ReadExtCnt()       { local XX=""; printf "RCC\\n" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }         # unit is 1
ReadExtCntPeriod() { local XX=""; printf "RCT\\n" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }         # unit is ns
ReadExtPosPulse()  { local XX=""; printf "RC+\\n" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }         # unit is ns
ReadExtNegPulse()  { local XX=""; printf "RC-\\n" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }         # unit is ns
ReadExtDuty()      { local XX=""; printf "RCD\\n" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }         # unit is 10*%
ReadGateTime()     { local XX=""; printf "RCT\\n" > "$DEV"; read -r XX < "$DEV"; echo "$XX"; }         # unit is 10^x (0->1 1->10 2->100)
#
SetSweepObject()     { local XX=""; printf "SOB%s\\n"  "$1" > "$DEV"; read -r XX < "$DEV"; }   # 0,1,2,3 see SweepObject definition
SetSweepStart()      { local XX=""; printf "SST%s\\n"  "$1" > "$DEV"; read -r XX < "$DEV"; }   # 
SetSweepEnd()        { local XX=""; printf "SEN%s\\n"  "$1" > "$DEV"; read -r XX < "$DEV"; }   # 
SetSweepTime()       { local XX=""; printf "STI%s\\n"  "$1" > "$DEV"; read -r XX < "$DEV"; }   #
SetSweepMode()       { local XX=""; printf "SMO%s\\n"  "$1" > "$DEV"; read -r XX < "$DEV"; }   # 0,1
SetSweepOn()         { local XX=""; printf "SBE0\\n"        > "$DEV"; read -r XX < "$DEV"; }   #
SetSweepOff()        { local XX=""; printf "SBE1\\n"        > "$DEV"; read -r XX < "$DEV"; }   #
SetSweepCtrlTime()   { local XX=""; printf "SXY0\\n"        > "$DEV"; read -r XX < "$DEV"; }   #
SetSweepCtrlAnalog() { local XX=""; printf "SXY1\\n"        > "$DEV"; read -r XX < "$DEV"; }   #
#   save and restore, parameter is storage index [1…20]
SaveParamAll()       { local XX=""; printf "USN%s\\n"  "$1" > "$DEV"; read -r XX < "$DEV"; }   # [1…20] save Amplitude, Frequncy.... 1=power on default
LoadParamSet()       { local XX=""; printf "ULN%s\\n"  "$1" > "$DEV"; read -r XX < "$DEV"; }
# Sync mode, param is [0…4] ~ element out of SyncObject
AddSyncMode()        { local XX=""; printf "USA%1i\\n" "$1" > "$DEV"; read -r XX < "$DEV"; }   # [0…4] ~to SyncObject, Does not work in sweep mode
CancelSyncMode()     { local XX=""; printf "USD%1i\\n" "$1" > "$DEV"; read -r XX < "$DEV"; }   # [0…4] ~to SyncObject, Does not work in sweep mode
ReadSync()           { local XX=""; printf "RSA%1i\\n" "$1" > "$DEV"; read -r XX < "$DEV"; IsEnabled "$XX"; }  # [0…4] ~to SyncObject, Does not work in sweep mode
ReadBuzzerStatus()   { local XX=""; printf "RBZ\\n"         > "$DEV"; read -r XX < "$DEV"; IsEnabled "$XX"; }
ReadUplinkMode()     { local XX=""; printf "RMS\\n"         > "$DEV"; read -r XX < "$DEV"; IsEnabled "$XX"; }
# Master/slave mode, param is [0,1] ~ element from UplinkMode
SetUplinkTyp()       { local XX=""; printf "UMS%1i\\n" "$1" > "$DEV"; read -r XX < "$DEV"; }  # master or slave
UplinkEnable()       { local XX=""; printf "UML%1i\\n" "$1" > "$DEV"; read -r XX < "$DEV"; }  # [0…1] 0=disable 1=enable
BuzzerEnable()       { local XX=""; printf "UBZ%1i\\n" "$1" > "$DEV"; read -r XX < "$DEV"; }  # [0…1] 0=disable 1=enable

ResetCnt()           { printf "WCZ0\\n" > "$DEV" ; read -r XX < "$DEV"; }
PauseCnt()           { printf "WCP0\\n" > "$DEV" ; read -r XX < "$DEV"; }

SetupDEV
#  END OF LIBRARY
